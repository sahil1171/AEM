import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.annotations.SlingServletPaths;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.Node;
import javax.jcr.Session;
import javax.jcr.Value;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;

import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;

@Component(service = javax.servlet.Servlet.class,
           property = {
               "service.description=Download report of users with group name",
               "service.vendor=Etrade",
               "sling.servlet.paths=/bin/servlet/usergroupreport",
               "sling.servlet.methods=" + HttpConstants.METHOD_GET
           })
public class UserReportGroupsServlet extends SlingSafeMethodsServlet {

    private static final long serialVersionUID = 1L;

    private static final Logger LOGGER = LoggerFactory.getLogger(UserReportGroupsServlet.class);

    @Reference
    private QueryBuilder queryBuilder;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        response.setContentType("text/csv");
        response.setCharacterEncoding("UTF-8");

        try {
            LOGGER.debug("Servlet Called");

            ResourceResolver resourceResolver = request.getResourceResolver();
            Session session = resourceResolver.adaptTo(Session.class);
            LOGGER.debug("Resource Resolver Obtained");

            Map<String, String> queryMap = new HashMap<>();
            queryMap.put("p.hits", "selective");
            queryMap.put("p.limit", Long.toString(-1));
            queryMap.put("p.properties", "rep:authorizableId, rep:externalId, jcr:path");
            queryMap.put("path", "/home/users/etrade");
            queryMap.put("type", "rep:User");

            Query query = queryBuilder.createQuery(PredicateGroup.create(queryMap), session);
            SearchResult searchResult = query.getResult();
            List<Hit> hits = searchResult.getHits();

            List<UserGroupReport> userGroupReports = new ArrayList<>();

            for (Hit hit : hits) {
                String principalName = "";
                Value[] groups = null;
                String domain = "";
                String familyName = "";
                String givenName = "";
                String email = "";

                UserGroupReport userGroupReport = new UserGroupReport();
                Resource resource = hit.getResource();
                Map<String, Object> componentProperties = resource.getValueMap();
                Node hitNode = hit.getNode();

                if (hitNode.hasNode("profile")) {
                    Node profileNode = hitNode.getNode("profile");

                    if (profileNode.hasProperty("groups")) {
                        groups = profileNode.getProperty("groups").getValues();
                        userGroupReport.setGroups(groups);

                        // Remove after testing.
                        for (int i = 0; i < groups.length; i++) {
                            LOGGER.debug("PROPERTIES GROUP: {}", groups[i].getString());
                        }
                    }

                    if (profileNode.hasProperty("familyName")) {
                        familyName = profileNode.getProperty("familyName").getString();
                        userGroupReport.setFamilyName(familyName);
                        LOGGER.debug("PROPERTIES FAMILY NAME: {}", familyName);
                    }

                    if (profileNode.hasProperty("givenName")) {
                        givenName = profileNode.getProperty("givenName").getString();
                        userGroupReport.setGivenName(givenName);
                        LOGGER.debug("PROPERTIES GIVEN NAME: {}", givenName);
                    }

                    if (profileNode.hasProperty("email")) {
                        email = profileNode.getProperty("email").getString();
                        userGroupReport.setEmail(email);
                        domain = email.split("@")[1];
                        userGroupReport.setDomain(domain);
                        LOGGER.debug("PROPERTIES EMAIL: {}", email);
                        LOGGER.debug("PROPERTIES DOMAIN: {}", domain);
                    }
                }

                LOGGER.debug("PATH: {}", resource.getPath());
                principalName = componentProperties.get("rep:principalName").toString();
                userGroupReport.setPrincipalName(principalName);
                userGroupReports.add(userGroupReport);
            }

            StringBuilder csvBuilder = new StringBuilder();
            csvBuilder.append("Name,Group,Domain,Family Name,Given Name,Email\n");

            for (UserGroupReport ugr : userGroupReports) {
                Value[] groupValues = ugr.getGroups();
                for (Value groupValue : groupValues) {
                    csvBuilder.append(ugr.getPrincipalName()).append(",");
                    csvBuilder.append(groupValue.getString()).append(",");
                    csvBuilder.append(ugr.getDomain()).append(",");
                    csvBuilder.append(ugr.getFamilyName()).append(",");
                    csvBuilder.append(ugr.getGivenName()).append(",");
                    csvBuilder.append(ugr.getEmail()).append("\n");
                }
            }

            String fileName = fileName("users_export_group") + ".csv";
            File csvFile = new File(fileName);
            try (FileWriter writer = new FileWriter(csvFile)) {
                writer.write(csvBuilder.toString());
            }

            String absolutePath = csvFile.getAbsolutePath();
            LOGGER.debug("CSV FILE Has Been Created: {}", absolutePath);

            File downloadFile = new File(absolutePath);
            try (FileInputStream inStream = new FileInputStream(downloadFile)) {
                String mimeType = "text/csv";
                response.setContentType(mimeType);
                response.setContentLength((int) downloadFile.length());

                String headerKey = "Content-Disposition";
                String headerValue = String.format("attachment; filename=\"%s\"", downloadFile.getName());
                response.setHeader(headerKey, headerValue);

                try (OutputStream outStream = response.getOutputStream()) {
                    byte[] buffer = new byte[8192];
                    int bytesRead;
                    while ((bytesRead = inStream.read(buffer)) != -1) {
                        outStream.write(buffer, 0, bytesRead);
                    }
                }
            }
        } catch (Exception e) {
            LOGGER.error("Exception occurred:", e);
            response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("ERROR");
        }
    }

    private String fileName(String baseName) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
        return baseName + dateFormat.format(new Date());
    }
}
